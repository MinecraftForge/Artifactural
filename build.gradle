import net.minecraftforge.artifactural.buildscript.JarTransformationTask
import net.minecraftforge.artifactural.buildscript.SoftwareComponentFactoryGrabber
import org.objectweb.asm.Label
import org.objectweb.asm.Opcodes
import org.objectweb.asm.tree.*

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'eclipse'
    id 'net.minecraftforge.gradleutils' version '[2.3,2.4]'
    id 'net.minecraftforge.licenser' version '1.0.1'
    id 'dev.gradleplugins.gradle-plugin-development' version '1.6.10'
}

group = 'net.minecraftforge'
version = gradleutils.tagOffsetVersion
println "Version: $version"
println "Java: ${System.getProperty 'java.version'} JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}) Arch: ${System.getProperty 'os.arch'}"

java {
    toolchain.languageVersion = JavaLanguageVersion.of(8)
    withSourcesJar()
}

sourceSets {
    api
    shared
    gradlecomp
}

configurations {
    sharedImplementation.extendsFrom apiImplementation
    gradlecompImplementation.extendsFrom sharedImplementation

    implementation.extendsFrom sharedImplementation
    implementation.extendsFrom gradlecompImplementation
}

repositories {
    mavenCentral()
    maven gradleutils.forgeMaven
}

dependencies {
    sharedImplementation sourceSets.api.output

    gradlecompImplementation sourceSets.shared.output
    gradlecompImplementation gradleApi('8.4')
    gradlecompImplementation 'com.google.guava:guava:30.1-jre'
    gradlecompImplementation 'net.minecraftforge:unsafe:0.2.0'

    implementation sourceSets.api.output
    implementation sourceSets.shared.output
    implementation sourceSets.gradlecomp.output
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'utf-8'
    options.deprecation = true
}

tasks.register('transformJar', JarTransformationTask) {
    addTransformer('net/minecraftforge/artifactural/gradle/GradleRepositoryAdapter') {
        it.methods.find {
            it.name == '<init>' && it.desc == '(Lorg/gradle/api/artifacts/ConfigurationContainer;Lnet/minecraftforge/artifactural/api/repository/Repository;Lorg/gradle/api/internal/artifacts/repositories/DefaultMavenLocalArtifactRepository;)V'
        }?.tap {
            it.instructions.find {
                it instanceof InsnNode && it.opcode == Opcodes.ACONST_NULL
            }?.tap(it.instructions.&remove)
            it.instructions.find {
                it instanceof MethodInsnNode && it.owner == 'org/gradle/api/internal/artifacts/repositories/AbstractArtifactRepository' && it.name == '<init>'
            }?.tap { (it as MethodInsnNode).desc = '(Lorg/gradle/api/model/ObjectFactory;)V' }
        }

        it.methods.find {
            it.name == 'getDescriptorGradle8_1Below' && it.desc == '()Lorg/gradle/api/internal/artifacts/repositories/descriptor/RepositoryDescriptor;'
        }.tap {
            it.instructions.find {
                it instanceof InsnNode && it.opcode == Opcodes.ACONST_NULL
            }.tap(it.instructions.&remove)
            it.instructions.find {
                it instanceof MethodInsnNode && it.owner == 'org/gradle/api/internal/artifacts/repositories/descriptor/FlatDirRepositoryDescriptor' && it.name == '<init>'
            }.tap { (it as MethodInsnNode).desc = '(Ljava/lang/String;Ljava/util/Collection;)V' }
        }
    }

    addTransformer('net/minecraftforge/artifactural/gradle/GradleRepositoryAdapter$1$1') { clazz ->
        // Gradle [8.9) - resolveArtifactsWithType changed parameter types
        {
            final mtd = 'resolveArtifactsWithType'
            final desc = '(Lorg/gradle/internal/component/model/ComponentArtifactResolveMetadata;Lorg/gradle/api/internal/component/ArtifactType;Lorg/gradle/internal/resolve/result/BuildableArtifactSetResolveResult;)V'
            clazz.methods.find { it.name == mtd && it.desc == desc }.tap {
                
                // null -> first parameter
                final aconst_null = it.instructions.find { it.opcode == Opcodes.ACONST_NULL }
                it.instructions.insertBefore(aconst_null, new VarInsnNode(Opcodes.ALOAD, 1))
                it.instructions.remove(aconst_null)
                
                // Change target desc
                final invoke = it.instructions.find { it instanceof MethodInsnNode && it.name == mtd }
                invoke.desc = desc
            }
        }
    
        // Gradle [???,8.2)
        {
            clazz.methods.find {
                it.name == 'getMetadataGradle8_1Below' && it.desc == '(Lorg/gradle/internal/resolve/result/BuildableModuleComponentMetaDataResolveResult;)Lorg/gradle/internal/component/external/model/ModuleComponentResolveMetadata;'
            }.tap {
                it.instructions.find {
                    it instanceof MethodInsnNode && it.owner == 'org/gradle/internal/resolve/result/BuildableModuleComponentMetaDataResolveResult' && it.name == 'getMetaData'
                }.tap { (it as MethodInsnNode).desc = '()Lorg/gradle/internal/component/external/model/ModuleComponentResolveMetadata;' }
            }

            clazz.methods.find {
                it.name == 'setResultResolvedGradle8_1Below' && it.desc == '(Lorg/gradle/internal/resolve/result/BuildableModuleComponentMetaDataResolveResult;Lorg/gradle/internal/component/external/model/ModuleComponentResolveMetadata;)V'
            }.tap {
                it.instructions.find {
                    it instanceof MethodInsnNode && it.owner == 'org/gradle/internal/resolve/result/BuildableModuleComponentMetaDataResolveResult' && it.name == 'resolved'
                }.tap { (it as MethodInsnNode).desc = '(Lorg/gradle/internal/component/external/model/ModuleComponentResolveMetadata;)V' }
            }
        }

        // Gradle [6.1,7.6)
        {
            final method = clazz.visitMethod(Opcodes.ACC_PUBLIC, 'resolveArtifact', '(Lorg/gradle/internal/component/model/ComponentArtifactMetadata;Lorg/gradle/internal/component/model/ModuleSources;Lorg/gradle/internal/resolve/result/BuildableArtifactResolveResult;)V', null, new String[]{})
            final l0 = new Label()
            method.visitLabel(l0)

            method.visitVarInsn(Opcodes.ALOAD, 0)
            method.visitFieldInsn(Opcodes.GETFIELD, 'net/minecraftforge/artifactural/gradle/GradleRepositoryAdapter$1$1', 'val$delegate', 'Lorg/gradle/api/internal/artifacts/ivyservice/ivyresolve/ModuleComponentRepositoryAccess;')
            method.visitVarInsn(Opcodes.ALOAD, 1)
            method.visitVarInsn(Opcodes.ALOAD, 2)
            method.visitVarInsn(Opcodes.ALOAD, 3)
            method.visitMethodInsn(Opcodes.INVOKEINTERFACE, 'org/gradle/api/internal/artifacts/ivyservice/ivyresolve/ModuleComponentRepositoryAccess', 'resolveArtifact', '(Lorg/gradle/internal/component/model/ComponentArtifactMetadata;Lorg/gradle/internal/component/model/ModuleSources;Lorg/gradle/internal/resolve/result/BuildableArtifactResolveResult;)V', true)
            final l1 = new Label()
            method.visitLabel(l1)
            method.visitInsn(Opcodes.RETURN)
            final l2 = new Label()
            method.visitLabel(l2)
            method.visitLocalVariable('this', 'Lnet/minecraftforge/artifactural/gradle/GradleRepositoryAdapter$1$1;', null, l0, l2, 0)
            method.visitLocalVariable('artifact', 'Lorg/gradle/internal/component/model/ComponentArtifactMetadata;', null, l0, l2, 1)
            method.visitLocalVariable('moduleSources', 'Lorg/gradle/internal/component/model/ModuleSources;', null, l0, l2, 2)
            method.visitLocalVariable('result', 'Lorg/gradle/internal/resolve/result/BuildableArtifactResolveResult;', null, l0, l2, 3)
            method.visitEnd()
        }

        // Gradle [6.0,7.6)
        {
            final method = clazz.visitMethod(Opcodes.ACC_PUBLIC, 'resolveArtifacts', '(Lorg/gradle/internal/component/model/ComponentResolveMetadata;Lorg/gradle/internal/component/model/ConfigurationMetadata;Lorg/gradle/internal/resolve/result/BuildableComponentArtifactsResolveResult;)V', null, new String[]{})
            final l0 = new Label()
            method.visitLabel(l0)

            method.visitVarInsn(Opcodes.ALOAD, 0)
            method.visitFieldInsn(Opcodes.GETFIELD, 'net/minecraftforge/artifactural/gradle/GradleRepositoryAdapter$1$1', 'val$delegate', 'Lorg/gradle/api/internal/artifacts/ivyservice/ivyresolve/ModuleComponentRepositoryAccess;')
            method.visitVarInsn(Opcodes.ALOAD, 1)
            method.visitVarInsn(Opcodes.ALOAD, 2)
            method.visitVarInsn(Opcodes.ALOAD, 3)
            method.visitMethodInsn(Opcodes.INVOKEINTERFACE, 'org/gradle/api/internal/artifacts/ivyservice/ivyresolve/ModuleComponentRepositoryAccess', 'resolveArtifacts', '(Lorg/gradle/internal/component/model/ComponentResolveMetadata;Lorg/gradle/internal/component/model/ConfigurationMetadata;Lorg/gradle/internal/resolve/result/BuildableComponentArtifactsResolveResult;)V', true)
            final l1 = new Label()
            method.visitLabel(l1)
            method.visitInsn(Opcodes.RETURN)
            final l2 = new Label()
            method.visitLabel(l2)
            method.visitLocalVariable('this', 'Lnet/minecraftforge/artifactural/gradle/GradleRepositoryAdapter$1$1;', null, l0, l2, 0)
            method.visitLocalVariable('component', 'Lorg/gradle/internal/component/model/ComponentResolveMetadata;', null, l0, l2, 1)
            method.visitLocalVariable('variant', 'Lorg/gradle/internal/component/model/ConfigurationMetadata;', null, l0, l2, 2)
            method.visitLocalVariable('result', 'Lorg/gradle/internal/resolve/result/BuildableComponentArtifactsResolveResult;', null, l0, l2, 3)
            method.visitEnd()
        }

        // Gradle [3.1,6.0) U [7.5,7.6)
        {
            final method = clazz.visitMethod(Opcodes.ACC_PUBLIC, 'resolveArtifacts', '(Lorg/gradle/internal/component/model/ComponentResolveMetadata;Lorg/gradle/internal/resolve/result/BuildableComponentArtifactsResolveResult;)V', null, new String[]{})
            final l0 = new Label()
            method.visitLabel(l0)

            method.visitVarInsn(Opcodes.ALOAD, 0)
            method.visitFieldInsn(Opcodes.GETFIELD, 'net/minecraftforge/artifactural/gradle/GradleRepositoryAdapter$1$1', 'val$delegate', 'Lorg/gradle/api/internal/artifacts/ivyservice/ivyresolve/ModuleComponentRepositoryAccess;')
            method.visitVarInsn(Opcodes.ALOAD, 1)
            method.visitVarInsn(Opcodes.ALOAD, 2)
            method.visitMethodInsn(Opcodes.INVOKEINTERFACE, 'org/gradle/api/internal/artifacts/ivyservice/ivyresolve/ModuleComponentRepositoryAccess', 'resolveArtifacts', '(Lorg/gradle/internal/component/model/ComponentResolveMetadata;Lorg/gradle/internal/resolve/result/BuildableComponentArtifactsResolveResult;)V', true)
            final l1 = new Label()
            method.visitLabel(l1)
            method.visitInsn(Opcodes.RETURN)
            final l2 = new Label()
            method.visitLabel(l2)
            method.visitLocalVariable('this', 'Lnet/minecraftforge/artifactural/gradle/GradleRepositoryAdapter$1$1;', null, l0, l2, 0)
            method.visitLocalVariable('component', 'Lorg/gradle/internal/component/model/ComponentResolveMetadata;', null, l0, l2, 1)
            method.visitLocalVariable('result', 'Lorg/gradle/internal/resolve/result/BuildableComponentArtifactsResolveResult;', null, l0, l2, 3)
            method.visitEnd()
        }
    }

    inputFile = tasks.named('jar').flatMap { it.archiveFile }
    outputFile = project.layout.buildDirectory.dir('libs').flatMap { dir ->
        tasks.named('jar').flatMap { it.archiveFileName }.map { String name -> dir.file(name.substring(0, name.length() - 4) + '-transformed.jar') }
    }
}

tasks.named('jar', Jar).configure {
    from sourceSets.api.output
    from sourceSets.shared.output
    from sourceSets.gradlecomp.output
    finalizedBy 'transformJar'
}

tasks.named('sourcesJar', Jar).configure {
    from sourceSets.api.allSource
    from sourceSets.shared.allSource
    from sourceSets.gradlecomp.allSource
}

license {
    header = file("$rootDir/header.txt")
}

[configurations.runtimeElements, configurations.apiElements, configurations.sourcesElements].each { config ->
    config.outgoing { publications ->
        publications.artifacts.removeIf {
            (it.classifier === null || it.classifier.blank) && it.extension == 'jar' // Remove the jar artifact as we want to replace it with the transformed one
        }
        publications.artifact(tasks.named('transformJar').flatMap { it.outputFile }) {
            classifier = null
        }
    }
}

configurations.sourcesElements.outgoing {
    it.artifacts.removeIf {
        it.classifier != 'sources'
    }
}

publishing {
    publications.register('mavenJava', MavenPublication) {
        from components.java

        pom {
            groupId = project.group
            version = project.version
            artifactId = 'artifactural'
            packaging = 'jar'
            name = 'Artifactural'
            description = 'A Gradle artifact processing and management tool'
            url = 'https://github.com/MinecraftForge/Artifactural/'

            gradleutils.pom.setGitHubDetails(pom, 'Artifactural')

            license gradleutils.pom.Licenses.LGPLv2_1
        }
    }

    repositories {
        maven gradleutils.publishingForgeMaven
    }
}

//changelog {
//    from '3.0'
//}
